// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onlinejudge.proto

#include "onlinejudge.pb.h"
#include "onlinejudge.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace onlinejudge {

static const char* OnlineJudge_method_names[] = {
  "/onlinejudge.OnlineJudge/listQues",
  "/onlinejudge.OnlineJudge/detailQues",
  "/onlinejudge.OnlineJudge/jUdge",
  "/onlinejudge.OnlineJudge/rEsult",
};

std::unique_ptr< OnlineJudge::Stub> OnlineJudge::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OnlineJudge::Stub> stub(new OnlineJudge::Stub(channel));
  return stub;
}

OnlineJudge::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_listQues_(OnlineJudge_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_detailQues_(OnlineJudge_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_jUdge_(OnlineJudge_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_rEsult_(OnlineJudge_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::onlinejudge::qName>* OnlineJudge::Stub::listQuesRaw(::grpc::ClientContext* context, const ::onlinejudge::qSubmit& request) {
  return ::grpc::internal::ClientReaderFactory< ::onlinejudge::qName>::Create(channel_.get(), rpcmethod_listQues_, context, request);
}

::grpc::ClientAsyncReader< ::onlinejudge::qName>* OnlineJudge::Stub::AsynclistQuesRaw(::grpc::ClientContext* context, const ::onlinejudge::qSubmit& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onlinejudge::qName>::Create(channel_.get(), cq, rpcmethod_listQues_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onlinejudge::qName>* OnlineJudge::Stub::PrepareAsynclistQuesRaw(::grpc::ClientContext* context, const ::onlinejudge::qSubmit& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onlinejudge::qName>::Create(channel_.get(), cq, rpcmethod_listQues_, context, request, false, nullptr);
}

::grpc::Status OnlineJudge::Stub::detailQues(::grpc::ClientContext* context, const ::onlinejudge::qName& request, ::onlinejudge::qUestion* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_detailQues_, context, request, response);
}

void OnlineJudge::Stub::experimental_async::detailQues(::grpc::ClientContext* context, const ::onlinejudge::qName* request, ::onlinejudge::qUestion* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_detailQues_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::onlinejudge::qUestion>* OnlineJudge::Stub::AsyncdetailQuesRaw(::grpc::ClientContext* context, const ::onlinejudge::qName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::onlinejudge::qUestion>::Create(channel_.get(), cq, rpcmethod_detailQues_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::onlinejudge::qUestion>* OnlineJudge::Stub::PrepareAsyncdetailQuesRaw(::grpc::ClientContext* context, const ::onlinejudge::qName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::onlinejudge::qUestion>::Create(channel_.get(), cq, rpcmethod_detailQues_, context, request, false);
}

::grpc::Status OnlineJudge::Stub::jUdge(::grpc::ClientContext* context, const ::onlinejudge::qSubmit& request, ::onlinejudge::replyResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_jUdge_, context, request, response);
}

void OnlineJudge::Stub::experimental_async::jUdge(::grpc::ClientContext* context, const ::onlinejudge::qSubmit* request, ::onlinejudge::replyResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_jUdge_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::onlinejudge::replyResult>* OnlineJudge::Stub::AsyncjUdgeRaw(::grpc::ClientContext* context, const ::onlinejudge::qSubmit& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::onlinejudge::replyResult>::Create(channel_.get(), cq, rpcmethod_jUdge_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::onlinejudge::replyResult>* OnlineJudge::Stub::PrepareAsyncjUdgeRaw(::grpc::ClientContext* context, const ::onlinejudge::qSubmit& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::onlinejudge::replyResult>::Create(channel_.get(), cq, rpcmethod_jUdge_, context, request, false);
}

::grpc::Status OnlineJudge::Stub::rEsult(::grpc::ClientContext* context, const ::onlinejudge::qName& request, ::onlinejudge::replyResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_rEsult_, context, request, response);
}

void OnlineJudge::Stub::experimental_async::rEsult(::grpc::ClientContext* context, const ::onlinejudge::qName* request, ::onlinejudge::replyResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_rEsult_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::onlinejudge::replyResult>* OnlineJudge::Stub::AsyncrEsultRaw(::grpc::ClientContext* context, const ::onlinejudge::qName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::onlinejudge::replyResult>::Create(channel_.get(), cq, rpcmethod_rEsult_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::onlinejudge::replyResult>* OnlineJudge::Stub::PrepareAsyncrEsultRaw(::grpc::ClientContext* context, const ::onlinejudge::qName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::onlinejudge::replyResult>::Create(channel_.get(), cq, rpcmethod_rEsult_, context, request, false);
}

OnlineJudge::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OnlineJudge_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< OnlineJudge::Service, ::onlinejudge::qSubmit, ::onlinejudge::qName>(
          std::mem_fn(&OnlineJudge::Service::listQues), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OnlineJudge_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OnlineJudge::Service, ::onlinejudge::qName, ::onlinejudge::qUestion>(
          std::mem_fn(&OnlineJudge::Service::detailQues), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OnlineJudge_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OnlineJudge::Service, ::onlinejudge::qSubmit, ::onlinejudge::replyResult>(
          std::mem_fn(&OnlineJudge::Service::jUdge), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OnlineJudge_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OnlineJudge::Service, ::onlinejudge::qName, ::onlinejudge::replyResult>(
          std::mem_fn(&OnlineJudge::Service::rEsult), this)));
}

OnlineJudge::Service::~Service() {
}

::grpc::Status OnlineJudge::Service::listQues(::grpc::ServerContext* context, const ::onlinejudge::qSubmit* request, ::grpc::ServerWriter< ::onlinejudge::qName>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OnlineJudge::Service::detailQues(::grpc::ServerContext* context, const ::onlinejudge::qName* request, ::onlinejudge::qUestion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OnlineJudge::Service::jUdge(::grpc::ServerContext* context, const ::onlinejudge::qSubmit* request, ::onlinejudge::replyResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OnlineJudge::Service::rEsult(::grpc::ServerContext* context, const ::onlinejudge::qName* request, ::onlinejudge::replyResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace onlinejudge

